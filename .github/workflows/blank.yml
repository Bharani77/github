name: Expose SSH via Web Terminal + LocalTunnel
on:
  workflow_dispatch:
    inputs:
      duration:
        description: 'Duration to keep tunnel alive (minutes)'
        required: true
        default: '60'
        type: string
      password:
        description: 'Password for SSH user'
        required: true
        type: string

jobs:
  expose-ssh-web:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-server nodejs npm
          sudo systemctl start ssh
          sudo systemctl enable ssh

      - name: Create SSH user
        run: |
          sudo useradd -m -s /bin/bash sshuser
          echo "sshuser:${{ github.event.inputs.password }}" | sudo chpasswd
          sudo usermod -aG sudo sshuser
          echo "✅ Created user 'sshuser' with sudo privileges"

      - name: Install and configure ttyd (Web Terminal)
        run: |
          # Download ttyd (more reliable than wetty for this use case)
          wget -q https://github.com/tsl0922/ttyd/releases/download/1.7.3/ttyd.x86_64
          chmod +x ttyd.x86_64
          sudo mv ttyd.x86_64 /usr/local/bin/ttyd
          echo "✅ ttyd installed successfully"

      - name: Install LocalTunnel
        run: |
          sudo npm install -g localtunnel
          echo "✅ LocalTunnel installed"

      - name: Start Web Terminal
        run: |
          # Start ttyd with login shell
          nohup ttyd -p 3000 -i 0.0.0.0 -t titleFixed=GitHub-Actions-SSH -t fontSize=16 login > ttyd.log 2>&1 &
          sleep 5
          
          # Check if ttyd is running
          if pgrep -f ttyd > /dev/null; then
            echo "✅ ttyd server started on port 3000"
            # Test local connection
            if curl -s http://localhost:3000 | grep -q "ttyd"; then
              echo "✅ ttyd responding correctly"
            else
              echo "⚠️ ttyd may not be responding properly"
              echo "ttyd log:"
              cat ttyd.log
            fi
          else
            echo "❌ Failed to start ttyd"
            cat ttyd.log
            exit 1
          fi

      - name: Start LocalTunnel
        run: |
          # Start LocalTunnel
          nohup lt --port 3000 > lt.log 2>&1 &
          sleep 10
          
          # Extract URL with multiple attempts
          for i in {1..5}; do
            TUNNEL_URL=$(grep -o 'https://.*\.loca\.lt' lt.log | head -1)
            if [ -n "$TUNNEL_URL" ]; then
              break
            fi
            echo "Attempt $i: Waiting for LocalTunnel URL..."
            sleep 5
          done
          
          if [ -n "$TUNNEL_URL" ]; then
            echo "🎉 SUCCESS! Web Terminal is ready!"
            echo "=================================="
            echo "🌐 URL: $TUNNEL_URL"
            echo "👤 Username: sshuser"
            echo "🔑 Password: [your provided password]"
            echo "⏰ Duration: ${{ github.event.inputs.duration }} minutes"
            echo "=================================="
            echo ""
            echo "📋 To bypass LocalTunnel reminder:"
            echo "   • Add header: bypass-tunnel-reminder: true"
            echo "   • Or use custom User-Agent"
            echo "   • Browser extension: ModHeader (recommended)"
            echo ""
            echo "🔧 Test command:"
            echo "curl -H 'bypass-tunnel-reminder: true' $TUNNEL_URL"
            
            # Write to GitHub step summary
            echo "## 🚀 Web SSH Terminal Ready" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| **URL** | $TUNNEL_URL |" >> $GITHUB_STEP_SUMMARY
            echo "| **Username** | sshuser |" >> $GITHUB_STEP_SUMMARY
            echo "| **Duration** | ${{ github.event.inputs.duration }} minutes |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Bypass Reminder Instructions:" >> $GITHUB_STEP_SUMMARY
            echo "- Install **ModHeader** browser extension" >> $GITHUB_STEP_SUMMARY
            echo "- Add header: \`bypass-tunnel-reminder: true\`" >> $GITHUB_STEP_SUMMARY
            echo "- Or set custom User-Agent: \`MyBrowser/1.0\`" >> $GITHUB_STEP_SUMMARY
            
            # Test the tunnel
            echo ""
            echo "🧪 Testing tunnel connectivity..."
            if curl -s -H "bypass-tunnel-reminder: true" "$TUNNEL_URL" | grep -q "ttyd"; then
              echo "✅ Tunnel is working correctly!"
            else
              echo "⚠️ Tunnel test inconclusive - but should work in browser"
            fi
            
          else
            echo "❌ Failed to get LocalTunnel URL"
            echo "LocalTunnel log:"
            cat lt.log
            exit 1
          fi

      - name: Keep session alive
        run: |
          echo "🕐 Keeping session alive for ${{ github.event.inputs.duration }} minutes..."
          echo "Press Ctrl+C in the Actions tab to stop early"
          
          # Keep alive with periodic status updates
          DURATION_SECONDS=$((${{ github.event.inputs.duration }} * 60))
          INTERVAL=300  # 5 minutes
          ELAPSED=0
          
          while [ $ELAPSED -lt $DURATION_SECONDS ]; do
            if [ $((ELAPSED % INTERVAL)) -eq 0 ] && [ $ELAPSED -gt 0 ]; then
              REMAINING=$(((DURATION_SECONDS - ELAPSED) / 60))
              echo "⏰ Still alive - $REMAINING minutes remaining"
            fi
            sleep 60
            ELAPSED=$((ELAPSED + 60))
          done
          
          echo "⏰ Session time expired. Shutting down..."

      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up..."
          pkill -f ttyd || true
          pkill -f localtunnel || true
          sudo userdel -r sshuser 2>/dev/null || true
          echo "✅ Cleanup completed"
