name: Chrome Browser - Docker Solution
on:
  workflow_dispatch:
    inputs:
      duration:
        description: 'Duration to keep tunnel alive (minutes)'
        required: true
        default: '60'
        type: string

jobs:
  chrome-docker:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Install requirements
        run: |
          sudo apt-get update
          sudo apt-get install -y nodejs npm
          echo "‚úÖ Requirements installed"

      - name: Start Chrome in Docker with VNC
        run: |
          # Pull and run Chrome container with VNC web interface
          docker run -d \
            --name chrome-vnc \
            -p 6080:80 \
            --shm-size=2g \
            -e RESOLUTION=1920x1080 \
            selenium/standalone-chrome:latest

          # Wait for container to start
          echo "‚è≥ Starting Chrome container..."
          sleep 30
          
          # Check if container is running
          if docker ps | grep -q chrome-vnc; then
            echo "‚úÖ Chrome container started successfully"
          else
            echo "‚ùå Chrome container failed to start"
            docker logs chrome-vnc
            exit 1
          fi

      - name: Open Tampermonkey page in Chrome
        run: |
          # Wait a bit more for Chrome to fully load
          sleep 15
          
          # Use Selenium to navigate to Tampermonkey page
          docker exec chrome-vnc /opt/google/chrome/google-chrome \
            --no-sandbox \
            --disable-dev-shm-usage \
            --remote-debugging-port=9222 \
            "https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo" &
          
          echo "‚úÖ Chrome navigated to Tampermonkey installation page"

      - name: Setup tunnel
        run: |
          npm install -g localtunnel
          
          # Start tunnel
          nohup lt --port 6080 > tunnel.log 2>&1 &
          sleep 15
          
          # Get tunnel URL
          TUNNEL_URL=$(grep -o 'https://.*\.loca\.lt' tunnel.log | head -1)
          
          if [ -n "$TUNNEL_URL" ]; then
            echo "üéâ SUCCESS! Chrome Browser Ready!"
            echo "================================================"
            echo "üåê URL: $TUNNEL_URL"
            echo "üîë No password required"
            echo "‚è∞ Duration: ${{ github.event.inputs.duration }} minutes"
            echo "================================================"
            echo ""
            echo "üìã How to Use:"
            echo "1. Click the URL above"
            echo "2. Chrome browser will appear immediately"
            echo "3. Navigate to Chrome Web Store"
            echo "4. Search for 'Tampermonkey' and install"
            echo ""
            echo "‚ú® Features:"
            echo "- Real Chrome browser in web interface"
            echo "- No VNC setup required"
            echo "- Full interaction support"
            echo "- High performance"
            
            # GitHub summary
            echo "## üöÄ Chrome Browser Docker Ready" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** $TUNNEL_URL" >> $GITHUB_STEP_SUMMARY
            echo "**Type:** Docker-based Chrome with VNC" >> $GITHUB_STEP_SUMMARY
            echo "**Access:** Click URL ‚Üí Chrome appears instantly" >> $GITHUB_STEP_SUMMARY
            
          else
            echo "‚ùå Failed to create tunnel"
            cat tunnel.log
            exit 1
          fi

      - name: Keep alive
        run: |
          echo "üïê Keeping Chrome alive for ${{ github.event.inputs.duration }} minutes..."
          
          DURATION_SECONDS=$((${{ github.event.inputs.duration }} * 60))
          INTERVAL=300
          ELAPSED=0
          
          while [ $ELAPSED -lt $DURATION_SECONDS ]; do
            if [ $((ELAPSED % INTERVAL)) -eq 0 ] && [ $ELAPSED -gt 0 ]; then
              REMAINING=$(((DURATION_SECONDS - ELAPSED) / 60))
              echo "‚è∞ Chrome running - $REMAINING minutes remaining"
              
              # Check container health
              if docker ps | grep -q chrome-vnc; then
                echo "‚úÖ Chrome container healthy"
              else
                echo "üîÑ Restarting Chrome container..."
                docker stop chrome-vnc || true
                docker rm chrome-vnc || true
                docker run -d \
                  --name chrome-vnc \
                  -p 6080:80 \
                  --shm-size=2g \
                  -e RESOLUTION=1920x1080 \
                  selenium/standalone-chrome:latest
                sleep 15
              fi
            fi
            sleep 60
            ELAPSED=$((ELAPSED + 60))
          done
          
          echo "‚è∞ Session ended"

      - name: Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up..."
          pkill -f localtunnel || true
          docker stop chrome-vnc || true
          docker rm chrome-vnc || true
          echo "‚úÖ Cleanup complete"
