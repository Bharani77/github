name: Expose SSH via Web Terminal + LocalTunnel
on:
  workflow_dispatch:
    inputs:
      duration:
        description: 'Duration to keep tunnel alive (minutes)'
        required: true
        default: '60'
        type: string
      password:
        description: 'Password for SSH user'
        required: true
        type: string

jobs:
  expose-ssh-web:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-server nodejs npm wget curl gnupg2 software-properties-common
          
          # Install GUI components
          sudo apt-get install -y xvfb x11vnc fluxbox xterm
          
          # Install Google Chrome (using new GPG key method)
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
          # Install additional tools
          sudo apt-get install -y unzip firefox
          
          sudo systemctl start ssh
          sudo systemctl enable ssh
          echo "✅ Installed Chrome, GUI components, and SSH server"

      - name: Create SSH user
        run: |
          sudo useradd -m -s /bin/bash sshuser
          echo "sshuser:${{ github.event.inputs.password }}" | sudo chpasswd
          sudo usermod -aG sudo sshuser
          
          # Set up user environment for GUI
          sudo mkdir -p /home/sshuser/.config/google-chrome
          sudo mkdir -p /home/sshuser/Downloads
          
          # Create startup script for GUI
          sudo tee /home/sshuser/start-gui.sh > /dev/null << 'EOF'
          #!/bin/bash
          export DISPLAY=:1
          # Start virtual display
          Xvfb :1 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          sleep 2
          # Start window manager
          fluxbox > /dev/null 2>&1 &
          sleep 1
          echo "GUI environment started on DISPLAY=:1"
          echo "Starting Chrome browser..."
          google-chrome --no-sandbox --disable-dev-shm-usage --disable-gpu --remote-debugging-port=9222 > /dev/null 2>&1 &
          echo "Chrome started successfully!"
          echo ""
          echo "Available commands:"
          echo "  chrome          - Start Chrome browser (GUI mode)"
          echo "  chrome-headless - Start Chrome in headless mode"
          echo "  firefox         - Start Firefox browser (GUI mode)"
          echo "  pkill chrome    - Close Chrome"
          echo "  pkill firefox   - Close Firefox"
          echo "  x11vnc          - Start VNC server to view GUI remotely"
          echo ""
          EOF
          
          # Create Chrome auto-launch script for direct browser access
          sudo tee /home/sshuser/start-chrome-browser.sh > /dev/null << 'EOF'
          #!/bin/bash
          export DISPLAY=:1
          
          # Start virtual display if not running
          if ! pgrep -x "Xvfb" > /dev/null; then
              Xvfb :1 -screen 0 1920x1080x24 > /dev/null 2>&1 &
              sleep 2
          fi
          
          # Start window manager if not running
          if ! pgrep -x "fluxbox" > /dev/null; then
              fluxbox > /dev/null 2>&1 &
              sleep 1
          fi
          
          # Kill existing Chrome processes
          pkill -f google-chrome > /dev/null 2>&1
          sleep 1
          
          echo "🚀 Starting Chrome Browser with Tampermonkey..."
          echo "📋 Opening Tampermonkey installation page..."
          
          # Start Chrome with Tampermonkey installation page
          google-chrome \
              --no-sandbox \
              --disable-dev-shm-usage \
              --disable-gpu \
              --disable-web-security \
              --disable-features=VizDisplayCompositor \
              --start-maximized \
              --no-first-run \
              --no-default-browser-check \
              --disable-default-apps \
              --remote-debugging-port=9222 \
              "https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo" \
              > /dev/null 2>&1 &
          
          sleep 3
          echo "✅ Chrome is now running with Tampermonkey installation page!"
          echo "🔧 To install Tampermonkey: Click 'Add to Chrome' button"
          echo "🌐 Chrome Remote Debugging: http://localhost:9222"
          echo ""
          
          # Keep the session alive and show Chrome status
          while true; do
              if pgrep -f google-chrome > /dev/null; then
                  echo "🟢 Chrome is running... ($(date '+%H:%M:%S'))"
              else
                  echo "🔴 Chrome stopped. Restarting..."
                  google-chrome \
                      --no-sandbox \
                      --disable-dev-shm-usage \
                      --disable-gpu \
                      --start-maximized \
                      --remote-debugging-port=9222 \
                      "https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo" \
                      > /dev/null 2>&1 &
              fi
              sleep 30
          done
          EOF
          
          sudo chmod +x /home/sshuser/start-gui.sh
          sudo chmod +x /home/sshuser/start-chrome-browser.sh
          sudo chown -R sshuser:sshuser /home/sshuser
          echo "✅ Created user 'sshuser' with GUI environment and Chrome auto-launch setup"

      - name: Install Tampermonkey Extension
        run: |
          # Create extension directory
          sudo mkdir -p /home/sshuser/.config/google-chrome/Default/Extensions
          
          # Create a script to install Tampermonkey on first Chrome launch
          sudo tee /home/sshuser/install-tampermonkey.sh > /dev/null << 'EOF'
          #!/bin/bash
          echo "To install Tampermonkey:"
          echo "1. Open Chrome and go to: chrome://extensions/"
          echo "2. Enable 'Developer mode' (top right toggle)"
          echo "3. Go to Chrome Web Store: https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo"
          echo "4. Click 'Add to Chrome'"
          echo ""
          echo "Or install via command line:"
          echo "google-chrome --new-window 'https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo'"
          EOF
          
          sudo chmod +x /home/sshuser/install-tampermonkey.sh
          sudo chown -R sshuser:sshuser /home/sshuser
          echo "✅ Tampermonkey installation script created"

      - name: Install and configure ttyd (Web Terminal)
        run: |
          # Download ttyd (more reliable than wetty for this use case)
          wget -q https://github.com/tsl0922/ttyd/releases/download/1.7.3/ttyd.x86_64
          chmod +x ttyd.x86_64
          sudo mv ttyd.x86_64 /usr/local/bin/ttyd
          echo "✅ ttyd installed successfully"

      - name: Start GUI Environment
        run: |
          # Start GUI environment as sshuser
          sudo -u sshuser bash -c "cd /home/sshuser && ./start-gui.sh" &
          sleep 5
          echo "✅ GUI environment initialized"

      - name: Install LocalTunnel
        run: |
          sudo npm install -g localtunnel
          echo "✅ LocalTunnel installed"

      - name: Start ttyd web terminal with Chrome browser
        run: |
          # Start ttyd with Chrome browser auto-launch instead of bash shell
          nohup ttyd -p 3000 -i 0.0.0.0 -t titleFixed=Chrome-Browser-Session -t fontSize=14 -c sshuser:${{ github.event.inputs.password }} /home/sshuser/start-chrome-browser.sh > ttyd.log 2>&1 &
          sleep 5
          
          # Check if ttyd is running
          if pgrep -f ttyd > /dev/null; then
            echo "✅ ttyd server started on port 3000 with Chrome auto-launch"
            # Test local connection
            if curl -s http://localhost:3000 | grep -q "ttyd"; then
              echo "✅ ttyd responding correctly"
            else
              echo "⚠️ ttyd may not be responding properly"
              echo "ttyd log:"
              cat ttyd.log
            fi
          else
            echo "❌ Failed to start ttyd"
            cat ttyd.log
            exit 1
          fi

      - name: Start LocalTunnel
        run: |
          # Start LocalTunnel
          nohup lt --port 3000 > lt.log 2>&1 &
          sleep 10
          
          # Extract URL with multiple attempts
          for i in {1..5}; do
            TUNNEL_URL=$(grep -o 'https://.*\.loca\.lt' lt.log | head -1)
            if [ -n "$TUNNEL_URL" ]; then
              break
            fi
            echo "Attempt $i: Waiting for LocalTunnel URL..."
            sleep 5
          done
          
          if [ -n "$TUNNEL_URL" ]; then
            echo "🎉 SUCCESS! Chrome Browser with Tampermonkey Auto-Launch is ready!"
            echo "========================================================="
            echo "🌐 URL: $TUNNEL_URL"
            echo "👤 Username: sshuser"
            echo "🔑 Password: [your provided password]"
            echo "⏰ Duration: ${{ github.event.inputs.duration }} minutes"
            echo "========================================================="
            echo ""
            echo "🚀 WHAT HAPPENS WHEN YOU LOGIN:"
            echo "✅ Chrome browser will automatically start"
            echo "✅ Tampermonkey installation page will open"
            echo "✅ Just click 'Add to Chrome' to install Tampermonkey"
            echo "✅ No terminal commands needed!"
            echo ""
            echo "🌐 CHROME FEATURES:"
            echo "   • Full browser interface"
            echo "   • Tampermonkey installation ready"
            echo "   • Auto-restart if Chrome crashes"
            echo "   • Remote debugging on port 9222"
            echo ""
            echo "📋 To bypass LocalTunnel reminder:"
            echo "   • Add header: bypass-tunnel-reminder: true"
            echo "   • Or use custom User-Agent"
            echo "   • Browser extension: ModHeader (recommended)"
            echo ""
            echo "✨ FEATURES INCLUDED:"
            echo "   ✅ Auto-launching Chrome browser"
            echo "   ✅ Tampermonkey installation page ready"
            echo "   ✅ Full GUI environment (1920x1080)"
            echo "   ✅ Auto-restart on browser crashes"
            echo "   ✅ No terminal knowledge required"
            echo ""
            echo "🔧 Test command:"
            echo "curl -H 'bypass-tunnel-reminder: true' $TUNNEL_URL"
            
            # Write to GitHub step summary
            echo "## 🚀 Chrome Browser with Auto-Launch Ready" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| **URL** | $TUNNEL_URL |" >> $GITHUB_STEP_SUMMARY
            echo "| **Username** | sshuser |" >> $GITHUB_STEP_SUMMARY
            echo "| **Duration** | ${{ github.event.inputs.duration }} minutes |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🌐 What You'll See:" >> $GITHUB_STEP_SUMMARY
            echo "- **Chrome browser automatically starts**" >> $GITHUB_STEP_SUMMARY
            echo "- **Tampermonkey installation page opens**" >> $GITHUB_STEP_SUMMARY
            echo "- **Click 'Add to Chrome' to install Tampermonkey**" >> $GITHUB_STEP_SUMMARY
            echo "- **No terminal commands needed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Bypass Reminder Instructions:" >> $GITHUB_STEP_SUMMARY
            echo "- Install **ModHeader** browser extension" >> $GITHUB_STEP_SUMMARY
            echo "- Add header: \`bypass-tunnel-reminder: true\`" >> $GITHUB_STEP_SUMMARY
            echo "- Or set custom User-Agent: \`MyBrowser/1.0\`" >> $GITHUB_STEP_SUMMARY
            
            # Test the tunnel
            echo ""
            echo "🧪 Testing tunnel connectivity..."
            if curl -s -H "bypass-tunnel-reminder: true" "$TUNNEL_URL" | grep -q "ttyd"; then
              echo "✅ Tunnel is working correctly!"
            else
              echo "⚠️ Tunnel test inconclusive - but should work in browser"
            fi
            
          else
            echo "❌ Failed to get LocalTunnel URL"
            echo "LocalTunnel log:"
            cat lt.log
            exit 1
          fi

      - name: Keep session alive
        run: |
          echo "🕐 Keeping session alive for ${{ github.event.inputs.duration }} minutes..."
          echo "Press Ctrl+C in the Actions tab to stop early"
          
          # Keep alive with periodic status updates
          DURATION_SECONDS=$((${{ github.event.inputs.duration }} * 60))
          INTERVAL=300  # 5 minutes
          ELAPSED=0
          
          while [ $ELAPSED -lt $DURATION_SECONDS ]; do
            if [ $((ELAPSED % INTERVAL)) -eq 0 ] && [ $ELAPSED -gt 0 ]; then
              REMAINING=$(((DURATION_SECONDS - ELAPSED) / 60))
              echo "⏰ Still alive - $REMAINING minutes remaining"
            fi
            sleep 60
            ELAPSED=$((ELAPSED + 60))
          done
          
          echo "⏰ Session time expired. Shutting down..."

      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up..."
          pkill -f ttyd || true
          pkill -f localtunnel || true
          sudo userdel -r sshuser 2>/dev/null || true
          echo "✅ Cleanup completed"
