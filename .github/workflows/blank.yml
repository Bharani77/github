name: Vivaldi Browser - VNC with Tampermonkey
on:
  workflow_dispatch:
    inputs:
      duration:
        description: 'Duration to keep tunnel alive (minutes)'
        required: true
        default: '60'
        type: string

jobs:
  vivaldi-vnc:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl nodejs npm python3-pip
          
          # Install Vivaldi browser
          echo "üåê Installing Vivaldi browser..."
          wget -qO- https://repo.vivaldi.com/archive/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/vivaldi-browser.gpg
          echo "deb [signed-by=/usr/share/keyrings/vivaldi-browser.gpg arch=amd64,armhf] https://repo.vivaldi.com/archive/deb/ stable main" | sudo tee /etc/apt/sources.list.d/vivaldi-archive.list
          sudo apt-get update
          sudo apt-get install -y vivaldi-stable
          
          # Install X11 and VNC
          sudo apt-get install -y xvfb x11vnc fluxbox
          
          echo "‚úÖ Vivaldi and environment ready"

      - name: Start services step by step
        run: |
          # Step 1: Start virtual display
          echo "üñ•Ô∏è Starting virtual display..."
          Xvfb :1 -screen 0 1920x1080x24 &
          export DISPLAY=:1
          sleep 5
          
          # Step 2: Start window manager
          echo "ü™ü Starting window manager..."
          fluxbox &
          sleep 3
          
          # Step 3: Start Vivaldi with Tampermonkey page
          echo "üåê Starting Vivaldi browser..."
          vivaldi-stable \
            --no-sandbox \
            --disable-dev-shm-usage \
            --disable-gpu \
            --start-maximized \
            --no-first-run \
            --disable-default-apps \
            --disable-background-timer-throttling \
            --disable-backgrounding-occluded-windows \
            --disable-renderer-backgrounding \
            "https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo" &
          sleep 10
          
          # Step 4: Start VNC server
          echo "üì° Starting VNC server..."
          x11vnc -display :1 -nopw -listen 0.0.0.0 -xkb -forever -shared -rfbport 5901 &
          sleep 5
          
          # Verify everything is running
          echo "üîç Checking services..."
          echo "- Display :1: $(ps aux | grep -c 'Xvfb :1' || echo 0) processes"
          echo "- Fluxbox: $(ps aux | grep -c fluxbox || echo 0) processes"  
          echo "- Vivaldi: $(ps aux | grep -c vivaldi-stable || echo 0) processes"
          echo "- VNC port 5901: $(ss -tlnp | grep -c :5901 || echo 0) listeners"
          
          # Test VNC connection locally
          if ss -tlnp | grep -q :5901; then
            echo "‚úÖ VNC server is listening on port 5901"
          else
            echo "‚ùå VNC server not listening - trying alternative setup"
            pkill -f x11vnc
            sleep 2
            x11vnc -display :1 -nopw -listen localhost -forever -shared -rfbport 5901 &
            sleep 5
            if ss -tlnp | grep -q :5901; then
              echo "‚úÖ VNC server started with localhost binding"
            else
              echo "‚ùå VNC server completely failed"
              exit 1
            fi
          fi

      - name: Setup noVNC web interface
        run: |
          # Install websockify
          pip3 install websockify
          
          # Get noVNC
          wget -q https://github.com/novnc/noVNC/archive/refs/tags/v1.4.0.tar.gz
          tar xf v1.4.0.tar.gz
          cd noVNC-1.4.0
          
          # Start websockify
          echo "üåê Starting websockify..."
          websockify --web . 6080 localhost:5901 &
          sleep 10
          
          # Simple port check
          if ss -tlnp | grep -q :6080; then
            echo "‚úÖ Websockify running on port 6080"
          else
            echo "‚ùå Websockify failed to start"
            exit 1
          fi
          
          # Test if we can reach the web interface
          if curl -s --connect-timeout 10 http://localhost:6080 > /dev/null; then
            echo "‚úÖ Web interface is responding"
          else
            echo "‚ö†Ô∏è Web interface not responding, but may still work"
          fi

      - name: Create tunnel
        run: |
          npm install -g localtunnel
          
          # Start tunnel
          nohup lt --port 6080 > tunnel.log 2>&1 &
          sleep 20
          
          # Get tunnel URL
          TUNNEL_URL=$(grep -o 'https://.*\.loca\.lt' tunnel.log | head -1)
          
          if [ -n "$TUNNEL_URL" ]; then
            echo "üéâ SUCCESS! Vivaldi Browser VNC Ready!"
            echo "================================================"
            echo "üåê URL: $TUNNEL_URL"
            echo "üîë Password: Not required"
            echo "‚è∞ Duration: ${{ github.event.inputs.duration }} minutes"
            echo "================================================"
            echo ""
            echo "üìã Connection Instructions:"
            echo "1. Click the URL above"
            echo "2. You should see noVNC interface"
            echo "3. Click 'Connect' button"
            echo "4. Vivaldi browser will appear"
            echo "5. Tampermonkey installation page is already open"
            echo "6. Click 'Add to Chrome' to install Tampermonkey"
            echo ""
            echo "üîß About Vivaldi + Tampermonkey:"
            echo "- Vivaldi is Chromium-based, so Chrome Web Store works"
            echo "- Tampermonkey installs just like in Chrome"
            echo "- All Chrome extensions are compatible"
            echo "- Vivaldi has built-in ad blocker and more features"
            echo ""
            echo "üîß Troubleshooting:"
            echo "- If connection fails, wait 30 seconds and try again"
            echo "- Make sure to click 'Connect' not just load the page"
            echo "- If black screen, click in the center to focus"
            echo ""
            echo "üìä Service Status:"
            echo "- VNC Server: $(ss -tlnp | grep :5901 | wc -l) running"
            echo "- Web Server: $(ss -tlnp | grep :6080 | wc -l) running"
            echo "- Vivaldi: $(pgrep -f vivaldi-stable | wc -l) processes"
            
            # GitHub summary
            echo "## üé≠ Vivaldi Browser VNC Ready" >> $GITHUB_STEP_SUMMARY
            echo "**URL:** $TUNNEL_URL" >> $GITHUB_STEP_SUMMARY
            echo "**Browser:** Vivaldi (Chromium-based)" >> $GITHUB_STEP_SUMMARY
            echo "**Instructions:** Click URL ‚Üí Click Connect ‚Üí Vivaldi appears" >> $GITHUB_STEP_SUMMARY
            echo "**Tampermonkey:** Chrome Web Store page open for installation" >> $GITHUB_STEP_SUMMARY
            echo "**Features:** Built-in ad blocker, privacy tools, customizable UI" >> $GITHUB_STEP_SUMMARY
            
          else
            echo "‚ùå Failed to create tunnel"
            echo "Tunnel log:"
            cat tunnel.log
            echo ""
            echo "Port status:"
            ss -tlnp | grep -E ':(5901|6080)'
            exit 1
          fi

      - name: Keep alive and monitor
        run: |
          echo "üïê Monitoring Vivaldi session for ${{ github.event.inputs.duration }} minutes..."
          
          DURATION_SECONDS=$((${{ github.event.inputs.duration }} * 60))
          INTERVAL=300
          ELAPSED=0
          
          while [ $ELAPSED -lt $DURATION_SECONDS ]; do
            if [ $((ELAPSED % INTERVAL)) -eq 0 ] && [ $ELAPSED -gt 0 ]; then
              REMAINING=$(((DURATION_SECONDS - ELAPSED) / 60))
              echo "‚è∞ $REMAINING minutes remaining"
              
              # Health check and restart if needed
              VNC_RUNNING=$(ss -tlnp | grep :5901 | wc -l)
              WEB_RUNNING=$(ss -tlnp | grep :6080 | wc -l)
              VIVALDI_RUNNING=$(pgrep -f vivaldi-stable | wc -l)
              
              echo "üìä Status: VNC($VNC_RUNNING) Web($WEB_RUNNING) Vivaldi($VIVALDI_RUNNING)"
              
              if [ $VNC_RUNNING -eq 0 ]; then
                echo "üîÑ Restarting VNC..."
                x11vnc -display :1 -nopw -listen localhost -forever -shared -rfbport 5901 &
              fi
              
              if [ $VIVALDI_RUNNING -eq 0 ]; then
                echo "üîÑ Restarting Vivaldi..."
                export DISPLAY=:1
                vivaldi-stable \
                  --no-sandbox \
                  --disable-dev-shm-usage \
                  --disable-gpu \
                  --start-maximized \
                  --no-first-run \
                  "https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo" &
              fi
            fi
            sleep 60
            ELAPSED=$((ELAPSED + 60))
          done
          
          echo "‚è∞ Vivaldi session completed"

      - name: Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up..."
          pkill -f localtunnel || true
          pkill -f websockify || true
          pkill -f x11vnc || true
          pkill -f vivaldi-stable || true
          pkill -f Xvfb || true
          pkill -f fluxbox || true
          echo "‚úÖ Cleanup done"
